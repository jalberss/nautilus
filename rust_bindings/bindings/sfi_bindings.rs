/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::core::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
pub const __llvm__: u32 = 1;
pub const __clang__: u32 = 1;
pub const __clang_major__: u32 = 8;
pub const __clang_minor__: u32 = 0;
pub const __clang_patchlevel__: u32 = 1;
pub const __clang_version__: &'static [u8; 28usize] = b"8.0.1 (branches/release_80)\0";
pub const __GNUC_MINOR__: u32 = 2;
pub const __GNUC_PATCHLEVEL__: u32 = 1;
pub const __GNUC__: u32 = 4;
pub const __GXX_ABI_VERSION: u32 = 1002;
pub const __ATOMIC_RELAXED: u32 = 0;
pub const __ATOMIC_CONSUME: u32 = 1;
pub const __ATOMIC_ACQUIRE: u32 = 2;
pub const __ATOMIC_RELEASE: u32 = 3;
pub const __ATOMIC_ACQ_REL: u32 = 4;
pub const __ATOMIC_SEQ_CST: u32 = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
pub const __VERSION__: &'static [u8; 51usize] =
    b"4.2.1 Compatible Clang 8.0.1 (branches/release_80)\0";
pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
pub const __CONSTANT_CFSTRINGS__: u32 = 1;
pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
pub const __BYTE_ORDER__: u32 = 1234;
pub const __LITTLE_ENDIAN__: u32 = 1;
pub const _LP64: u32 = 1;
pub const __LP64__: u32 = 1;
pub const __CHAR_BIT__: u32 = 8;
pub const __SCHAR_MAX__: u32 = 127;
pub const __SHRT_MAX__: u32 = 32767;
pub const __INT_MAX__: u32 = 2147483647;
pub const __LONG_MAX__: u64 = 9223372036854775807;
pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
pub const __WCHAR_MAX__: u32 = 2147483647;
pub const __WINT_MAX__: u32 = 4294967295;
pub const __INTMAX_MAX__: u64 = 9223372036854775807;
pub const __SIZE_MAX__: i32 = -1;
pub const __UINTMAX_MAX__: i32 = -1;
pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
pub const __INTPTR_MAX__: u64 = 9223372036854775807;
pub const __UINTPTR_MAX__: i32 = -1;
pub const __SIZEOF_DOUBLE__: u32 = 8;
pub const __SIZEOF_FLOAT__: u32 = 4;
pub const __SIZEOF_INT__: u32 = 4;
pub const __SIZEOF_LONG__: u32 = 8;
pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
pub const __SIZEOF_LONG_LONG__: u32 = 8;
pub const __SIZEOF_POINTER__: u32 = 8;
pub const __SIZEOF_SHORT__: u32 = 2;
pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
pub const __SIZEOF_SIZE_T__: u32 = 8;
pub const __SIZEOF_WCHAR_T__: u32 = 4;
pub const __SIZEOF_WINT_T__: u32 = 4;
pub const __SIZEOF_INT128__: u32 = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INTMAX_WIDTH__: u32 = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __PTRDIFF_WIDTH__: u32 = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __INTPTR_WIDTH__: u32 = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __SIZE_WIDTH__: u32 = 64;
pub const __WCHAR_WIDTH__: u32 = 32;
pub const __WINT_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
pub const __UINTMAX_WIDTH__: u32 = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINTPTR_WIDTH__: u32 = 64;
pub const __FLT16_HAS_DENORM__: u32 = 1;
pub const __FLT16_DIG__: u32 = 3;
pub const __FLT16_DECIMAL_DIG__: u32 = 5;
pub const __FLT16_HAS_INFINITY__: u32 = 1;
pub const __FLT16_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT16_MANT_DIG__: u32 = 11;
pub const __FLT16_MAX_10_EXP__: u32 = 4;
pub const __FLT16_MAX_EXP__: u32 = 15;
pub const __FLT16_MIN_10_EXP__: i32 = -13;
pub const __FLT16_MIN_EXP__: i32 = -14;
pub const __FLT_HAS_DENORM__: u32 = 1;
pub const __FLT_DIG__: u32 = 6;
pub const __FLT_DECIMAL_DIG__: u32 = 9;
pub const __FLT_HAS_INFINITY__: u32 = 1;
pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT_MANT_DIG__: u32 = 24;
pub const __FLT_MAX_10_EXP__: u32 = 38;
pub const __FLT_MAX_EXP__: u32 = 128;
pub const __FLT_MIN_10_EXP__: i32 = -37;
pub const __FLT_MIN_EXP__: i32 = -125;
pub const __DBL_HAS_DENORM__: u32 = 1;
pub const __DBL_DIG__: u32 = 15;
pub const __DBL_DECIMAL_DIG__: u32 = 17;
pub const __DBL_HAS_INFINITY__: u32 = 1;
pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
pub const __DBL_MANT_DIG__: u32 = 53;
pub const __DBL_MAX_10_EXP__: u32 = 308;
pub const __DBL_MAX_EXP__: u32 = 1024;
pub const __DBL_MIN_10_EXP__: i32 = -307;
pub const __DBL_MIN_EXP__: i32 = -1021;
pub const __LDBL_HAS_DENORM__: u32 = 1;
pub const __LDBL_DIG__: u32 = 18;
pub const __LDBL_DECIMAL_DIG__: u32 = 21;
pub const __LDBL_HAS_INFINITY__: u32 = 1;
pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
pub const __LDBL_MANT_DIG__: u32 = 64;
pub const __LDBL_MAX_10_EXP__: u32 = 4932;
pub const __LDBL_MAX_EXP__: u32 = 16384;
pub const __LDBL_MIN_10_EXP__: i32 = -4931;
pub const __LDBL_MIN_EXP__: i32 = -16381;
pub const __POINTER_WIDTH__: u32 = 64;
pub const __BIGGEST_ALIGNMENT__: u32 = 16;
pub const __WINT_UNSIGNED__: u32 = 1;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __UINT8_MAX__: u32 = 255;
pub const __INT8_MAX__: u32 = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __UINT16_MAX__: u32 = 65535;
pub const __INT16_MAX__: u32 = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __UINT32_MAX__: u32 = 4294967295;
pub const __INT32_MAX__: u32 = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINT64_MAX__: i32 = -1;
pub const __INT64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST8_MAX__: u32 = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_LEAST8_MAX__: u32 = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_LEAST16_MAX__: u32 = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_LEAST16_MAX__: u32 = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_LEAST32_MAX__: u32 = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_LEAST64_MAX__: i32 = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INT_FAST8_MAX__: u32 = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_FAST8_MAX__: u32 = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_FAST16_MAX__: u32 = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_FAST16_MAX__: u32 = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_FAST32_MAX__: u32 = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_FAST32_MAX__: u32 = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_FAST64_MAX__: i32 = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __FINITE_MATH_ONLY__: u32 = 0;
pub const __GNUC_STDC_INLINE__: u32 = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __NO_INLINE__: u32 = 1;
pub const __FLT_EVAL_METHOD__: u32 = 0;
pub const __FLT_RADIX__: u32 = 2;
pub const __DECIMAL_DIG__: u32 = 21;
pub const __code_model_small_: u32 = 1;
pub const __amd64__: u32 = 1;
pub const __amd64: u32 = 1;
pub const __x86_64: u32 = 1;
pub const __x86_64__: u32 = 1;
pub const __k8: u32 = 1;
pub const __k8__: u32 = 1;
pub const __tune_k8__: u32 = 1;
pub const __NO_MATH_INLINES: u32 = 1;
pub const __FXSR__: u32 = 1;
pub const __SSE2__: u32 = 1;
pub const __SSE2_MATH__: u32 = 1;
pub const __SSE__: u32 = 1;
pub const __SSE_MATH__: u32 = 1;
pub const __MMX__: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
pub const __SIZEOF_FLOAT128__: u32 = 16;
pub const unix: u32 = 1;
pub const __unix: u32 = 1;
pub const __unix__: u32 = 1;
pub const linux: u32 = 1;
pub const __linux: u32 = 1;
pub const __linux__: u32 = 1;
pub const __ELF__: u32 = 1;
pub const __gnu_linux__: u32 = 1;
pub const __FLOAT128__: u32 = 1;
pub const __STDC__: u32 = 1;
pub const __STDC_HOSTED__: u32 = 1;
pub const __STDC_VERSION__: u32 = 201112;
pub const __STDC_UTF_16__: u32 = 1;
pub const __STDC_UTF_32__: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201505;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 23;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: i32 = -2147483648;
pub const WCHAR_MAX: u32 = 2147483647;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const NULL: u32 = 0;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const SFI_SYST_SRCH_START: u32 = 917504;
pub const SFI_SYST_SRCH_END: u32 = 1048575;
pub const SFI_SYST_SIG: u32 = 1414748499;
pub const SFI_CPUS_SIG: u32 = 1398100035;
pub const SFI_APIC_SIG: u32 = 1128878145;
pub const SFI_MMAP_SIG: u32 = 1346456909;
pub const SFI_FREQ_SIG: u32 = 1363497542;
pub const SFI_MTMR_SIG: u32 = 1380799565;
pub const SFI_MRTC_SIG: u32 = 1129469005;
pub const SFI_DEVS_SIG: u32 = 1398162756;
pub const SFI_WAKE_SIG: u32 = 1162559831;
pub const SFI_GPIO_SIG: u32 = 1330204743;
pub const SFI_OEM_SIG: &'static [u8; 4usize] = b"OEM\0";
pub const EFI_MEMORY_UC: u32 = 1;
pub const EFI_MEMORY_WC: u32 = 2;
pub const EFI_MEMORY_WT: u32 = 4;
pub const EFI_MEMORY_WB: u32 = 8;
pub const EFI_MEMORY_UCE: u32 = 16;
pub const EFI_MEMORY_WP: u32 = 4096;
pub const EFI_MEMORY_RP: u32 = 8192;
pub const EFI_MEMORY_XP: u32 = 16384;
pub const EFI_MEMORY_RUNTIME: i64 = -9223372036854775808;
pub type int_least8_t = ::libc::c_schar;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_schar;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type schar_t = ::libc::c_schar;
pub type uchar_t = ::libc::c_uchar;
pub type sshort_t = ::libc::c_short;
pub type ushort_t = ::libc::c_ushort;
pub type sint_t = ::libc::c_int;
pub type uint_t = ::libc::c_uint;
pub type sllong_t = ::libc::c_longlong;
pub type ullong_t = ::libc::c_ulonglong;
pub type slong_t = ::libc::c_long;
pub type ulong_t = ::libc::c_ulong;
pub type off_t = ::libc::c_ulong;
pub type sint64_t = ::libc::c_long;
pub type sint32_t = ::libc::c_int;
pub type sint16_t = ::libc::c_short;
pub type sint8_t = ::libc::c_char;
pub type addr_t = ulong_t;
pub type bool_t = uchar_t;
pub const efi_mem_type_t_EfiReservedMemoryType: efi_mem_type_t = 0;
pub const efi_mem_type_t_EfiLoaderCode: efi_mem_type_t = 1;
pub const efi_mem_type_t_EfiLoaderData: efi_mem_type_t = 2;
pub const efi_mem_type_t_EfiBootServicesCode: efi_mem_type_t = 3;
pub const efi_mem_type_t_EfiBootServicesData: efi_mem_type_t = 4;
pub const efi_mem_type_t_EfiRuntimeServicesCode: efi_mem_type_t = 5;
pub const efi_mem_type_t_EfiRuntimeServicesData: efi_mem_type_t = 6;
pub const efi_mem_type_t_EfiConventionalMemory: efi_mem_type_t = 7;
pub const efi_mem_type_t_EfiUnusableMemory: efi_mem_type_t = 8;
pub const efi_mem_type_t_EfiACPIReclaimMemory: efi_mem_type_t = 9;
pub const efi_mem_type_t_EfiACPIMemoryNVS: efi_mem_type_t = 10;
pub const efi_mem_type_t_EfiMemoryMappedIO: efi_mem_type_t = 11;
pub const efi_mem_type_t_EfiMemoryMappedIOPortSpace: efi_mem_type_t = 12;
pub const efi_mem_type_t_EfiPalCode: efi_mem_type_t = 13;
pub const efi_mem_type_t_EfiMaxMemoryType: efi_mem_type_t = 14;
pub type efi_mem_type_t = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sfi_common_hdr {
    pub sig: u32,
    pub len: u32,
    pub rev_id: u8,
    pub cksum: u8,
    pub oem_id: [::libc::c_char; 6usize],
    pub oeim_tbl_id: [::libc::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_sfi_common_hdr() {
    assert_eq!(
        ::core::mem::size_of::<sfi_common_hdr>(),
        24usize,
        concat!("Size of: ", stringify!(sfi_common_hdr))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_common_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(sfi_common_hdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_common_hdr>())).sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_common_hdr),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_common_hdr>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_common_hdr),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_common_hdr>())).rev_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_common_hdr),
            "::",
            stringify!(rev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_common_hdr>())).cksum as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_common_hdr),
            "::",
            stringify!(cksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_common_hdr>())).oem_id as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_common_hdr),
            "::",
            stringify!(oem_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_common_hdr>())).oeim_tbl_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_common_hdr),
            "::",
            stringify!(oeim_tbl_id)
        )
    );
}
pub type sfi_tbl_desc_t = u64;
pub type sfi_cpu_desc_t = u32;
pub type sfi_ioapic_desc_t = u64;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct efi_mem_desc {
    pub type_: u32,
    pub phys_start: u64,
    pub virt_start: u64,
    pub num_pages: u64,
    pub attr: u64,
}
#[test]
fn bindgen_test_layout_efi_mem_desc() {
    assert_eq!(
        ::core::mem::size_of::<efi_mem_desc>(),
        36usize,
        concat!("Size of: ", stringify!(efi_mem_desc))
    );
    assert_eq!(
        ::core::mem::align_of::<efi_mem_desc>(),
        1usize,
        concat!("Alignment of ", stringify!(efi_mem_desc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<efi_mem_desc>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_mem_desc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<efi_mem_desc>())).phys_start as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_mem_desc),
            "::",
            stringify!(phys_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<efi_mem_desc>())).virt_start as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_mem_desc),
            "::",
            stringify!(virt_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<efi_mem_desc>())).num_pages as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_mem_desc),
            "::",
            stringify!(num_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<efi_mem_desc>())).attr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_mem_desc),
            "::",
            stringify!(attr)
        )
    );
}
pub type efi_mem_desc_t = efi_mem_desc;
#[repr(C)]
#[derive(Debug)]
pub struct sfi_sys_tbl {
    pub hdr: sfi_common_hdr,
    pub entries: __IncompleteArrayField<sfi_tbl_desc_t>,
}
#[test]
fn bindgen_test_layout_sfi_sys_tbl() {
    assert_eq!(
        ::core::mem::size_of::<sfi_sys_tbl>(),
        24usize,
        concat!("Size of: ", stringify!(sfi_sys_tbl))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_sys_tbl>(),
        8usize,
        concat!("Alignment of ", stringify!(sfi_sys_tbl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_sys_tbl>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_sys_tbl),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_sys_tbl>())).entries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_sys_tbl),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sfi_cpu_tbl {
    pub hdr: sfi_common_hdr,
    pub entries: __IncompleteArrayField<sfi_cpu_desc_t>,
}
#[test]
fn bindgen_test_layout_sfi_cpu_tbl() {
    assert_eq!(
        ::core::mem::size_of::<sfi_cpu_tbl>(),
        24usize,
        concat!("Size of: ", stringify!(sfi_cpu_tbl))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_cpu_tbl>(),
        4usize,
        concat!("Alignment of ", stringify!(sfi_cpu_tbl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_cpu_tbl>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_cpu_tbl),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_cpu_tbl>())).entries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_cpu_tbl),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sfi_ioapic_tbl {
    pub hdr: sfi_common_hdr,
    pub entries: __IncompleteArrayField<sfi_ioapic_desc_t>,
}
#[test]
fn bindgen_test_layout_sfi_ioapic_tbl() {
    assert_eq!(
        ::core::mem::size_of::<sfi_ioapic_tbl>(),
        24usize,
        concat!("Size of: ", stringify!(sfi_ioapic_tbl))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_ioapic_tbl>(),
        8usize,
        concat!("Alignment of ", stringify!(sfi_ioapic_tbl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_ioapic_tbl>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_ioapic_tbl),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_ioapic_tbl>())).entries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_ioapic_tbl),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sfi_mmap_tbl {
    pub hdr: sfi_common_hdr,
    pub entries: __IncompleteArrayField<efi_mem_desc_t>,
}
#[test]
fn bindgen_test_layout_sfi_mmap_tbl() {
    assert_eq!(
        ::core::mem::size_of::<sfi_mmap_tbl>(),
        24usize,
        concat!("Size of: ", stringify!(sfi_mmap_tbl))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_mmap_tbl>(),
        1usize,
        concat!("Alignment of ", stringify!(sfi_mmap_tbl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_mmap_tbl>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_mmap_tbl),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_mmap_tbl>())).entries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_mmap_tbl),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sfi_freq_entry {
    pub freq: u32,
    pub trans_latency: u32,
    pub p_ctrl: u32,
}
#[test]
fn bindgen_test_layout_sfi_freq_entry() {
    assert_eq!(
        ::core::mem::size_of::<sfi_freq_entry>(),
        12usize,
        concat!("Size of: ", stringify!(sfi_freq_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_freq_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(sfi_freq_entry))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_freq_entry>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_freq_entry),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_freq_entry>())).trans_latency as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_freq_entry),
            "::",
            stringify!(trans_latency)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_freq_entry>())).p_ctrl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_freq_entry),
            "::",
            stringify!(p_ctrl)
        )
    );
}
pub type sfi_freq_entry_t = sfi_freq_entry;
#[repr(C)]
#[derive(Debug)]
pub struct sfi_freq_tbl {
    pub hdr: sfi_common_hdr,
    pub entries: __IncompleteArrayField<sfi_freq_entry_t>,
}
#[test]
fn bindgen_test_layout_sfi_freq_tbl() {
    assert_eq!(
        ::core::mem::size_of::<sfi_freq_tbl>(),
        24usize,
        concat!("Size of: ", stringify!(sfi_freq_tbl))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_freq_tbl>(),
        1usize,
        concat!("Alignment of ", stringify!(sfi_freq_tbl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_freq_tbl>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_freq_tbl),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_freq_tbl>())).entries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_freq_tbl),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sfi_m_timer_entry {
    pub phys_addr: u64,
    pub timer_freq: u32,
    pub irq: u32,
}
#[test]
fn bindgen_test_layout_sfi_m_timer_entry() {
    assert_eq!(
        ::core::mem::size_of::<sfi_m_timer_entry>(),
        16usize,
        concat!("Size of: ", stringify!(sfi_m_timer_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_m_timer_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(sfi_m_timer_entry))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_m_timer_entry>())).phys_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_m_timer_entry),
            "::",
            stringify!(phys_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_m_timer_entry>())).timer_freq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_m_timer_entry),
            "::",
            stringify!(timer_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_m_timer_entry>())).irq as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_m_timer_entry),
            "::",
            stringify!(irq)
        )
    );
}
pub type sfi_m_timer_entry_t = sfi_m_timer_entry;
#[repr(C)]
#[derive(Debug)]
pub struct sfi_m_timer_tbl {
    pub hdr: sfi_common_hdr,
    pub entries: __IncompleteArrayField<sfi_m_timer_entry_t>,
}
#[test]
fn bindgen_test_layout_sfi_m_timer_tbl() {
    assert_eq!(
        ::core::mem::size_of::<sfi_m_timer_tbl>(),
        24usize,
        concat!("Size of: ", stringify!(sfi_m_timer_tbl))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_m_timer_tbl>(),
        1usize,
        concat!("Alignment of ", stringify!(sfi_m_timer_tbl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_m_timer_tbl>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_m_timer_tbl),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_m_timer_tbl>())).entries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_m_timer_tbl),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sfi_m_rtc_entry {
    pub phys_addr: u64,
    pub irq: u32,
}
#[test]
fn bindgen_test_layout_sfi_m_rtc_entry() {
    assert_eq!(
        ::core::mem::size_of::<sfi_m_rtc_entry>(),
        12usize,
        concat!("Size of: ", stringify!(sfi_m_rtc_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_m_rtc_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(sfi_m_rtc_entry))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_m_rtc_entry>())).phys_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_m_rtc_entry),
            "::",
            stringify!(phys_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_m_rtc_entry>())).irq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_m_rtc_entry),
            "::",
            stringify!(irq)
        )
    );
}
pub type sfi_m_rtc_entry_t = sfi_m_rtc_entry;
#[repr(C)]
#[derive(Debug)]
pub struct sfi_m_rtc_tbl {
    pub hdr: sfi_common_hdr,
    pub entries: __IncompleteArrayField<sfi_m_rtc_entry_t>,
}
#[test]
fn bindgen_test_layout_sfi_m_rtc_tbl() {
    assert_eq!(
        ::core::mem::size_of::<sfi_m_rtc_tbl>(),
        24usize,
        concat!("Size of: ", stringify!(sfi_m_rtc_tbl))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_m_rtc_tbl>(),
        1usize,
        concat!("Alignment of ", stringify!(sfi_m_rtc_tbl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_m_rtc_tbl>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_m_rtc_tbl),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_m_rtc_tbl>())).entries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_m_rtc_tbl),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfi_wake_vec_tbl {
    pub hdr: sfi_common_hdr,
    pub wake_vec_addr: u64,
}
#[test]
fn bindgen_test_layout_sfi_wake_vec_tbl() {
    assert_eq!(
        ::core::mem::size_of::<sfi_wake_vec_tbl>(),
        32usize,
        concat!("Size of: ", stringify!(sfi_wake_vec_tbl))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_wake_vec_tbl>(),
        8usize,
        concat!("Alignment of ", stringify!(sfi_wake_vec_tbl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_wake_vec_tbl>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_wake_vec_tbl),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_wake_vec_tbl>())).wake_vec_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_wake_vec_tbl),
            "::",
            stringify!(wake_vec_addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sfi_plat_dev_entry {
    pub host_type: u8,
    pub host_num: u8,
    pub dev_addr: u16,
    pub dev_irq: u8,
    pub dev_max_freq: u32,
    pub dev_name: [::libc::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_sfi_plat_dev_entry() {
    assert_eq!(
        ::core::mem::size_of::<sfi_plat_dev_entry>(),
        25usize,
        concat!("Size of: ", stringify!(sfi_plat_dev_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_plat_dev_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(sfi_plat_dev_entry))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_plat_dev_entry>())).host_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_plat_dev_entry),
            "::",
            stringify!(host_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_plat_dev_entry>())).host_num as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_plat_dev_entry),
            "::",
            stringify!(host_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_plat_dev_entry>())).dev_addr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_plat_dev_entry),
            "::",
            stringify!(dev_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_plat_dev_entry>())).dev_irq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_plat_dev_entry),
            "::",
            stringify!(dev_irq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sfi_plat_dev_entry>())).dev_max_freq as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_plat_dev_entry),
            "::",
            stringify!(dev_max_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_plat_dev_entry>())).dev_name as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_plat_dev_entry),
            "::",
            stringify!(dev_name)
        )
    );
}
pub type sfi_plat_dev_entry_t = sfi_plat_dev_entry;
#[repr(C)]
#[derive(Debug)]
pub struct sfi_plat_dev_tbl {
    pub hdr: sfi_common_hdr,
    pub entries: __IncompleteArrayField<sfi_plat_dev_entry_t>,
}
#[test]
fn bindgen_test_layout_sfi_plat_dev_tbl() {
    assert_eq!(
        ::core::mem::size_of::<sfi_plat_dev_tbl>(),
        24usize,
        concat!("Size of: ", stringify!(sfi_plat_dev_tbl))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_plat_dev_tbl>(),
        1usize,
        concat!("Alignment of ", stringify!(sfi_plat_dev_tbl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_plat_dev_tbl>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_plat_dev_tbl),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_plat_dev_tbl>())).entries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_plat_dev_tbl),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sfi_gpio_entry {
    pub cntrl_name: [::libc::c_char; 16usize],
    pub pin_num: u16,
    pub pin_name: [::libc::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_sfi_gpio_entry() {
    assert_eq!(
        ::core::mem::size_of::<sfi_gpio_entry>(),
        34usize,
        concat!("Size of: ", stringify!(sfi_gpio_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<sfi_gpio_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(sfi_gpio_entry))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_gpio_entry>())).cntrl_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_gpio_entry),
            "::",
            stringify!(cntrl_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_gpio_entry>())).pin_num as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_gpio_entry),
            "::",
            stringify!(pin_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sfi_gpio_entry>())).pin_name as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(sfi_gpio_entry),
            "::",
            stringify!(pin_name)
        )
    );
}
pub type sfi_gpio_entry_t = sfi_gpio_entry;
extern "C" {
    pub fn sfi_find_syst() -> *mut sfi_sys_tbl;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sys_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nk_mem_info {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sfi_get_mmap_nentries(tbl: *mut sfi_mmap_tbl) -> ::libc::c_uint;
}
extern "C" {
    pub fn sfi_get_mmap() -> *mut sfi_mmap_tbl;
}
extern "C" {
    pub fn sfi_parse_phys_mem(mem: *mut nk_mem_info) -> ::libc::c_long;
}
extern "C" {
    pub fn sfi_parse_syst(sys: *mut sys_info, sfi: *mut sfi_sys_tbl) -> ::libc::c_int;
}
